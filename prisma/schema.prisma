generator client {
  provider = "prisma-client-js"
  output   = "./__generated__"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String

  displayName String
  picture     String?

  role UserRole @default(REGULAR)

  isVerified         Boolean @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean @default(false) @map("is_two_factor_enabled")

  method AuthMethod

  accounts Account[]

  memberships OrganizationMembership[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id String @id @default(uuid())

  type     String
  provider String

  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  expiresAt    Int     @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@map("accounts")
}

model Token {
  id String @id @default(uuid())

  email     String
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("tokens")
}

model Organization {
  id     String @id @default(uuid())
  name   String
  avatar Bytes?

  memberships OrganizationMembership[]
  boards      Board[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("organizations")
}

model OrganizationMembership {
  id String @id @default(uuid())

  userId         String
  organizationId String

  // Роли: Admin, Member
  role OrganizationRole @default(MEMBER)

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("organization_memberships")
}

model Board {
  id            String       @id @default(uuid())
  title         String
  orgId         String
  organization  Organization @relation(fields: [orgId], references: [id])
  imageId       String
  imageThumbUrl String
  imageFullUrl  String
  imageLinkHTML String
  imageUserName String
  createdAt     DateTime     @default(now())
  List          List[]
}

model List {
  id    String @id @default(uuid())
  title String
  order Int

  cards Card[]

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(boardId)
}

model Card {
  id          String  @id @default(uuid())
  title       String
  order       Int
  description String? @db.Text
  status      STATUS

  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(listId)
}

enum STATUS {
  TODO
  IN_PROGRESS
  DONE
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model AuditLog {
  id          String      @id @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String      @db.Text
  userName    String      @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  REGULAR
  ADMIN
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  YANDEX
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}

enum OrganizationRole {
  ADMIN
  MEMBER
}
